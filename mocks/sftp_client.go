// Code generated by MockGen. DO NOT EDIT.
// Source: sftpclient/sftpclient.go
//
// Generated by this command:
//
//	mockgen -source=sftpclient/sftpclient.go -destination=mocks/sftp_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	sftpclient "fileparser/sftpclient"
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSFTPClient is a mock of SFTPClient interface.
type MockSFTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockSFTPClientMockRecorder
	isgomock struct{}
}

// MockSFTPClientMockRecorder is the mock recorder for MockSFTPClient.
type MockSFTPClientMockRecorder struct {
	mock *MockSFTPClient
}

// NewMockSFTPClient creates a new mock instance.
func NewMockSFTPClient(ctrl *gomock.Controller) *MockSFTPClient {
	mock := &MockSFTPClient{ctrl: ctrl}
	mock.recorder = &MockSFTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSFTPClient) EXPECT() *MockSFTPClientMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockSFTPClient) Open(path string) (sftpclient.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", path)
	ret0, _ := ret[0].(sftpclient.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockSFTPClientMockRecorder) Open(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSFTPClient)(nil).Open), path)
}

// ReadDir mocks base method.
func (m *MockSFTPClient) ReadDir(path string) ([]os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", path)
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockSFTPClientMockRecorder) ReadDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockSFTPClient)(nil).ReadDir), path)
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
}

// Read mocks base method.
func (m *MockFile) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFile)(nil).Read), p)
}
