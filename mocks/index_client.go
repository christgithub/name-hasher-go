// Code generated by MockGen. DO NOT EDIT.
// Source: indexer/client.go
//
// Generated by this command:
//
//	mockgen -source=indexer/client.go -destination=mocks/index_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	indexer "fileparser/indexer"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockESClient is a mock of ESClient interface.
type MockESClient struct {
	ctrl     *gomock.Controller
	recorder *MockESClientMockRecorder
	isgomock struct{}
}

// MockESClientMockRecorder is the mock recorder for MockESClient.
type MockESClientMockRecorder struct {
	mock *MockESClient
}

// NewMockESClient creates a new mock instance.
func NewMockESClient(ctrl *gomock.Controller) *MockESClient {
	mock := &MockESClient{ctrl: ctrl}
	mock.recorder = &MockESClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockESClient) EXPECT() *MockESClientMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockESClient) Index() indexer.IndexService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].(indexer.IndexService)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockESClientMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockESClient)(nil).Index))
}

// MockIndexService is a mock of IndexService interface.
type MockIndexService struct {
	ctrl     *gomock.Controller
	recorder *MockIndexServiceMockRecorder
	isgomock struct{}
}

// MockIndexServiceMockRecorder is the mock recorder for MockIndexService.
type MockIndexServiceMockRecorder struct {
	mock *MockIndexService
}

// NewMockIndexService creates a new mock instance.
func NewMockIndexService(ctrl *gomock.Controller) *MockIndexService {
	mock := &MockIndexService{ctrl: ctrl}
	mock.recorder = &MockIndexServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexService) EXPECT() *MockIndexServiceMockRecorder {
	return m.recorder
}

// BodyJson mocks base method.
func (m *MockIndexService) BodyJson(body any) indexer.IndexService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BodyJson", body)
	ret0, _ := ret[0].(indexer.IndexService)
	return ret0
}

// BodyJson indicates an expected call of BodyJson.
func (mr *MockIndexServiceMockRecorder) BodyJson(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BodyJson", reflect.TypeOf((*MockIndexService)(nil).BodyJson), body)
}

// Do mocks base method.
func (m *MockIndexService) Do(ctx context.Context) (*indexer.IndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx)
	ret0, _ := ret[0].(*indexer.IndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockIndexServiceMockRecorder) Do(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIndexService)(nil).Do), ctx)
}

// Index mocks base method.
func (m *MockIndexService) Index(name string) indexer.IndexService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", name)
	ret0, _ := ret[0].(indexer.IndexService)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockIndexServiceMockRecorder) Index(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIndexService)(nil).Index), name)
}
